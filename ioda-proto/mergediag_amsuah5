"""merge information from GSI diagnostic file into h5 file created by
amsuabufr2pth5"""
from __future__ import print_function
import tables
import numpy as np
import sys, read_diag, datetime
from utils import floatstr, splitdate, sat_id_dict, sat_sensor_dict, quantize

h5_filename = sys.argv[1]

f = tables.open_file(h5_filename,'r+')

table = f.root.amsua
analdate = '2016010106'
sat_id_str = 'n15'
sensor_id_str = 'amsua'

sat_id = sat_id_dict[sat_id_str]
sensor_id = sat_sensor_dict[sensor_id_str]
 
yyyy,mm,dd,hh = splitdate(analdate)
d0 = datetime.datetime(yyyy,mm,dd,hh)

obsfile = 'diag_%s_%s_ges.%s_ensmean' % (sensor_id_str,sat_id_str,analdate)
diag_rad = read_diag.diag_rad(obsfile,endian='big')
diag_rad.read_obs()

#obids = table.col('obid').tolist()
#seen = set()
#uniq = [x for x in obids if x not in seen and not seen.add(x)]    
#print(len(obids),len(uniq))
#raise SystemExit

for nob in range(diag_rad.nobs):
    lon = diag_rad.lon[nob].astype(np.float)
    if lon > 180: lon -= 360
    lat = diag_rad.lat[nob].astype(np.float)
    time = diag_rad.time[nob]
    nchan = int(diag_rad.channel[nob])
    # construct ob id
    d1 = d0 + datetime.timedelta(seconds = int(round(time*3600)))
    yyyymmddhhmmss = int(d1.strftime('%Y%m%d%H%M%S'))
    latstr = '%8.4f' % quantize(lat,2)
    lonstr = '%9.4f' % quantize(lon,2)
    # construct obid
    obid = "%3s %3s %8s %9s %4s %14s" % \
    (sat_id,sensor_id,latstr,lonstr,nchan,yyyymmddhhmmss)
    # find rows with matching obid in table
    cond = 'obid == "%46s"' % obid
    rows = table.where(cond) 
    # fill in fields from diag file
    nmatches = 0
    for row in rows:
        row['tb_model'] = diag_rad.hx[nob]
        row['tb_biascorr'] = diag_rad.biascorr[nob]
        row['water_frac'] = diag_rad.water_frac[nob]
        row['snow_frac'] = diag_rad.water_frac[nob]
        row['ice_frac'] = diag_rad.ice_frac[nob]
        row['use_flag'] = diag_rad.used[nob]
        row['qc_flag'] = diag_rad.qcmark[nob]
        row['oberr_orig'] = diag_rad.oberr_orig[nob]
        row['oberr_used'] = diag_rad.oberr[nob]
        row.update()
        #print(obid,row['tb'],row['tb_model'],row['tb_biascorr'])
        nmatches += 1
    if nmatches != 1:
        print('warning: %s matches found for obid = %s' % obid)

table.flush()
f.close()
