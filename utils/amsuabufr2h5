"""create h5 file (using h5py) from amsua bufr file"""
from __future__ import print_function
import ncepbufr
import h5py
import numpy as np
import sys

hdstr1 ='SAID SIID FOVN YEAR MNTH DAYS HOUR MINU SECO CLAT CLON CLATH CLONH HOLS'
hdstr2 ='SAZA SOZA BEARAZ SOLAZI'

# input and output file names, plus h5 dataset name, from command line args.
bufr_filename = sys.argv[1]
h5_filename = sys.argv[2]
dset_name = sys.argv[3]

if bufr_filename == h5_filename:
    raise IOError('cannot overwrite input bufr file')

bufr = ncepbufr.open(bufr_filename)
f = h5py.File(h5_filename,'w')

# get number of channels from 1st message in bufr file.
nchanl = None
while bufr.advance() == 0:
    while bufr.load_subset() == 0:
        obs = bufr.read_subset('TMBR',rep=True).squeeze()
        nchanl = len(obs)
        break
    if nchanl is not None: break
bufr.rewind()

dtlist = [('sat_id', 'i4'),('sensor_id', 'i4'), ('lat', 'f4'), ('lon', 'f4'), ('datetime','i8'),
          ('land_surface_height','f4'),('field_of_view_number','i4'),('sat_zenith_angle','f4'),
          ('solar_zenith_angle','f4'),('solar_azimuth_angle','f4'),('local_azimuth_angle','f4'),
          ('tb','f4',(nchanl,))]
data_dtype = np.dtype(dtlist)

data_list = []
while bufr.advance() == 0:
    print(bufr.msg_counter, bufr.msg_type, bufr.msg_date)
    while bufr.load_subset() == 0:
        hdr1 = bufr.read_subset(hdstr1).squeeze()
        hdr2 = bufr.read_subset(hdstr2).squeeze()
        yyyymmddhhss ='%04i%02i%02i%02i%02i%02i' % tuple(hdr1[3:9])
        # for satellite id, see common code table c-5
        # (http://www.emc.ncep.noaa.gov/mmb/data_processing/common_tbl_c1-c5.htm#c-5)
        # for sensor id, see common code table c-8
        # (http://www.emc.ncep.noaa.gov/mmb/data_processing/common_tbl_c8-c14.htm#c-8)
        obs = bufr.read_subset('TMBR',rep=True).squeeze()
        lat1 = hdr1[9]; lon1 = hdr1[10]
        lat2 = hdr1[11]; lon2 = hdr1[12]
        if lat2 <= 90 and lon2 <= 360:
            lat = lat2; lon = lon2
        else:
            lat = lat1; lon = lon1
        data_tuple = (int(hdr1[0]),int(hdr1[1]),lat,lon,yyyymmddhhss,
                      hdr1[13],int(hdr1[2]),hdr2[0],hdr2[1],hdr2[3],hdr2[2],obs)
        nchanls = len(obs)
        if nchanl != nchanls:
            raise ValueError('unexpected number of channels')
        data_list.append(data_tuple)
    ## only loop over first 4 subsets
    #if bufr.msg_counter == 4: break

# convert to numpy structured array, write out to hdf5 file.
data = np.empty(len(data_list),dtype=data_dtype)
nobs = data.shape[0]
# resizable, compressed dataset.
dset = f.create_dataset(dset_name,(nobs,),maxshape=(None,),chunks=True,dtype=data.dtype,compression="gzip",compression_opts=4)
for n in range(nobs):
    data[n] = data_list[n]
dset[:] = data
f.close()
bufr.close()
