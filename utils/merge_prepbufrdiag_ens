#!/usr/bin/env python
import ncepbufr
from time import clock
import numpy as np
from netCDF4 import Dataset
from ncepbufr import prepbufr_mnemonics_dict as mnemonics_dict
import sys, os
import read_diag

#python merge_prepbufrdiag.py prepbufr_2015102700.nc diag_conv_anl.2015102700 diag_conv_ges.2015102700
##python addensspred2merged.py prepbufr_2015102700.nc /Users/sgregory/Documents/NOAA/Data_Assimilation/sample_ensembledata/diag_conv_ges.2015102700_mem 80
##python merge_prepbufrdiag_ens2.py prepbufr_2015102700.nc diag_conv_anl.2015102700 diag_conv_ges.2015102700 /Users/sgregory/Documents/NOAA/Data_Assimilation/sample_ensembledata/diag_conv_ges.2015102700_mem
# set to True is use_prepb_satwnd was .false. in GSI (satwinds from satwndbufr, not prepbufr file)
skipsatwind = False

if len(sys.argv) < 4:
    raise SystemExit('addvar2merged.py <input nc prepbufr> '\
                     '<complete ensemble path and filename without number> '\
                     '<number of members >')

# file names from command line args.
prepbufrnc_file = sys.argv[1]
diagfile_ens = sys.argv[2]
ens_nummem = int(sys.argv[3])

# match records in diag_conv_ens file to records in prepbufr netcdf file.

nc_prepbufr = Dataset(prepbufrnc_file,'a')

## PREBUFR NC FILE made with prepbufr2nc ############################################
print 'read netcdf'
# observation id (station id/type code/lon/lat/time/elevation/pressure)
obidstrs = nc_prepbufr['obid'][:]
obidl = obidstrs.tolist()
# code used to debug missed matches
#for obid in obidl:
#    if obid.startswith('98753'): print obid
#raise SystemExit
print('%s non-unique ob ids' % str(len(obidl)-len(set(obidl))))
# observation id not including elevation or pressure.
obidstrs_noz_nop_hash = np.array([hash(obid[:-13]) for obid in obidstrs],np.int64) 
# observation id not including pressure.
obidstrs_nop_hash = np.array([hash(obid[:-6]) for obid in obidstrs],np.int64) 
obidstrs_hash = np.array([hash(obid) for obid in obidstrs],np.int64) 
print 'total number of prepbufr obs = ',nc_prepbufr.dimensions['nobs'].size
########## obidstrs (with an 's' at the end, comes from prepbufr
######################################################################################
prep_obdata = nc_prepbufr['obdata'][:]
bufr_missing_value = nc_prepbufr['obdata']._FillValue
obdata_shape = prep_obdata.shape
obdata_nrows = prep_obdata.shape[0]
obdata_ncols = prep_obdata.shape[1]
prep_nobs = obdata_nrows
prep_nvarb = obdata_ncols

# append new dimension and variables.

diag_varbstr='QOB TOB UOB VOB PRSS PWO'
ens_diag_obs = nc_prepbufr.createDimension('ensdiaginfo',len(diag_varbstr.split()))
ndiag_obd = len(ens_diag_obs)

indxrecord = np.empty((obdata_nrows,ndiag_obd))

## DIAG FILE from GSI ################################################################
exmple_ensfilename = diagfile_ens + '001'
diag_conv_ens = read_diag.diag_conv(exmple_ensfilename,endian='big')
diag_conv_ens.read_obs()
nobs_diag=diag_conv_ens.nobs
print 'ens nobs=',nobs_diag

##############################################################

prepindx = -1*np.ones(nobs_diag,np.int32)

obcol = np.empty(nobs_diag,np.int)
obcol_dict={}
obcol_dict['  q'] = 0
obcol_dict['  t'] = 1
obcol_dict['  u'] = 2
obcol_dict['  v'] = 3
obcol_dict[' ps'] = 4
obcol_dict[' pw'] = 5
#obcol_dict['gps'] = 6
#obcol_dict['sst'] = 7
#obcol_dict['tcp'] = 8
##############################################################



prnt_break=1000
#test_stop=10000
test_stop = nobs_diag #full run

tstart = clock()
indxrecord = np.empty((obdata_nrows,ndiag_obd))
count_nomatch = 0
ncount = 0
#for nob in range(nobs_diag):
for nob in range(test_stop):
    obtype = diag_conv_ens.obtype[nob]
    obcode = diag_conv_ens.code[nob]
    # gps data from gpsbufr, tcp from tcvitals.
    # don't know about sst?
    if obtype in ['sst','tcp','gps']: continue
    # skip if sat winds from satwndbufr
    if skipsatwind and obcode >= 240 and obcode < 260: continue
    press = diag_conv_ens.press[nob]
    # skip if missing or invalid pressure
    if press < 0 or press > 2.e3: continue
    stid = diag_conv_ens.station_ids[nob]
    lon = diag_conv_ens.lon[nob]
    lat = diag_conv_ens.lat[nob]
    time = diag_conv_ens.time[nob]
    elev = diag_conv_ens.stnelev[nob]
    obcol[nob] = obcol_dict[obtype]
    
    used = (diag_conv_ens.used[nob]+1) // 2
    
    obidstr = "%s %3i %6.2f %6.2f %9.5f %5i %6.1f" % \
    (stid,obcode,lon,lat,time,elev,press)
    obidstr_noz_nop_hash = hash(obidstr[:-13])
    obidstr_nop_hash = hash(obidstr[:-6])
    obidstr_hash = hash(obidstr)
    
    nobs_nc = np.nonzero(obidstrs_noz_nop_hash == obidstr_noz_nop_hash)[0]
    
    if len(nobs_nc) > 1: # if more than one match, include elevation
        nobs_nc = np.nonzero(obidstrs_nop_hash == obidstr_nop_hash)[0]
    if len(nobs_nc) > 1: # if more than one match, include pressure
        nobs_nc = np.nonzero(obidstrs_hash == obidstr_hash)[0]
    if len(nobs_nc) == 0 and used == 1:
        #print 'no match %s' % obidstr
        count_nomatch += 1
    elif len(nobs_nc) == 1:
        prepindx[nob] = nobs_nc[0]
    elif len(nobs_nc) > 1:
        raise ValueError('multiple matches found')
    if ncount % prnt_break == 0:
        print ncount,nob,used,obidstr,len(nobs_nc),'ens matches'
    if prepindx[nob] > 0:
        indxrecord[prepindx[nob],obcol[nob]] = nob
    ncount += 1

##############################################################
tend = clock()-tstart
print('cpu time to match = %s' % tend)
print('no matches found for %s nobs that GSI used' % count_nomatch)
######################################################################################

hx_memb = []
for mem in range(ens_nummem):
    memnum=mem+1
    memnum_str = '%03i' % memnum

    pathfilename = diagfile_ens + memnum_str
    diag_conv = read_diag.diag_conv(pathfilename,endian='big')
    diag_conv.read_obs()
    nobs = diag_conv.nobs
    if mem == 0:
        hx_memb=np.zeros((nobs,ens_nummem))
    diag_conv.read_obs()
    hxtemp = diag_conv.hx
    hx_memb[:,mem] = hxtemp
    print hx_memb.shape
hx_std = np.std(hx_memb, axis=1)
######################################################################################


######################################################################################
gsi_ensstdarray = np.empty((obdata_nrows,ndiag_obd))

starttime=clock()
#indcs2use=np.array(np.where(indxrecord > -1))
#rowindcs=indcs2use[0,:]
#colindcs=indcs2use[1,:]
#gsi_ensstdarray[rowindcs,colindcs] = hx_std[indxrecord[rowindcs,colindcs]]

for mm in range(obdata_nrows):
    for nn in range(ndiag_obd):
        if indxrecord[mm,nn] > -1:
            gsi_ensstdarray[mm,nn] = hx_std[indxrecord[mm,nn]]

endtime=clock()
myloopstime=endtime-starttime
print 'time for loops ', myloopstime

gsi_ensstd =\
nc_prepbufr.createVariable('gsi_ensstd',np.float32,('nobs','ensdiaginfo'),\
fill_value=bufr_missing_value,zlib=True,chunksizes=(prep_nobs,ndiag_obd))
gsi_ensstd.ensdiaginfo = diag_varbstr
gsi_ensstd.desc = 'gsi guess ensemble standard deviation'
nc_prepbufr['gsi_ensstd'][:] = gsi_ensstdarray[:]

##############################################################

nc_prepbufr.close()
